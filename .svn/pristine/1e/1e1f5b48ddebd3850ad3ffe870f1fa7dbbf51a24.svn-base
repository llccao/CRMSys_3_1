package com.meng.crm.handler;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.web.util.WebUtils;

import com.meng.crm.entity.SalesChance;
import com.meng.crm.entity.User;
import com.meng.crm.orm.Page;
import com.meng.crm.service.SalesChanceService;

@RequestMapping("/chance")
@Controller
public class SalesChanceHandler {
	
	@Autowired
	private SalesChanceService salesChanceService;
	
	/**
	 * 当用户点击指派是此方法用于将请求转发至指派页面,转发到指派页面
	 */
	@RequestMapping(value="/dispatch/{id}")
	public String designee(@PathVariable("id") String idStr,Map<String,Object> map) {
		// 销售机会的某些信息
		try {
			int id = Integer.parseInt(idStr);
			
			SalesChance chance = salesChanceService.getById(id);
			
			map.put("chance", chance);
			// 指派给目标人的名字
			List<User> users = salesChanceService.getUsers();
			map.put("users", users);
			
		} catch (NumberFormatException e) {}
		
		
		return "chance/dispatch";
	}
	
	/**
	 * 此方法用于保存指派信息
	 */
	
	@RequestMapping(value="/dispatch",method=RequestMethod.POST)
	public String dispatch(SalesChance chance,RedirectAttributes attributes) {
		
		try {
			// 改变某个销售机会的  status 让其变为执行中.
			salesChanceService.updatePart(chance);
			
			attributes.addFlashAttribute("message", "指派成功!");
			
		} catch (NumberFormatException e) {}
		
		return "redirect:/chance/list";
	}
	
	@RequestMapping(value="/save",method=RequestMethod.POST)
	public String save(SalesChance salesChance,RedirectAttributes attributes) {
		
		salesChanceService.save(salesChance);
		
		attributes.addFlashAttribute("message", "保存成功");
		// 重定向的时候必须要加上"/",因为他代表了项目的根路径
		return "redirect:/chance/list";
	}
	
	@RequestMapping("/input")
	public String input(Map<String,Object> map) {
		
		map.put("chance", new SalesChance());
		
		return "chance/input";
	}
	
	/**
	 * 没有使用 Restful 风格   
	 * @param id
	 * @param attributes
	 * @return
	 */
	@RequestMapping(value="/delete",method=RequestMethod.DELETE)
	public String delete(@RequestParam(value="id",required=false) Integer id,RedirectAttributes attributes) {
		
		// 删除相关的操作
		salesChanceService.delete(id);
		attributes.addFlashAttribute("message", "删除成功");
		
		return "redirect:/chance/list";
	}
	/**
	 * 真正进行修改的地方
	 */
	@RequestMapping(value="/save",method=RequestMethod.PUT)
	public String edit(@ModelAttribute SalesChance chance,RedirectAttributes attributes) {
		
		// 进行修改
		salesChanceService.update(chance);
		attributes.addFlashAttribute("message", "修改成功");
		return "redirect:/chance/list";
	}
	/**
	 * 转发到修改页面
	 */
	@RequestMapping(value="/update")
	public String update(@RequestParam(value="id",required=false)Integer id,Map<String,Object> map) {
		
		map.put("chance", salesChanceService.getById(id));
		
		return "chance/edit";
	}
	
	/**
	 * 带查询条件的分页:
	 * 1.首先页面传过来的是 filter_LIKES_custName 这种形式的查询条件,而我们要将将这种查询条件拆分,然后传到DAO中,
	 * 		然后按照条件查询
	 * 2.为了防止翻页将查询条件丢失了,我们要将查询的条件在放在一个map中传回去
	 */
	@RequestMapping("/list")
	public String list(@RequestParam(value="pageNo",required=false) String pageNoStr,
			Map<String,Object> map,HttpServletRequest request) {
		
		int pageNo = 1;
		try {
			pageNo = Integer.parseInt(pageNoStr);
		} catch (NumberFormatException e) { }
		
		int pageSize = 4;
		// 获取请求参数中的"filter_"为前缀的字符串,去除了前缀
		Map<String, Object> params = WebUtils.getParametersStartingWith(request, "filter_");
		
		Page<SalesChance> page = salesChanceService.getPage(pageNo, pageSize, params);
		map.put("page", page);
		
		// 将请求参数中的字符串转换查询条件,传呼页面,防止翻页是将查询条件弄丢
		String queryString = parserParamsToQueryString(params);
		
		map.put("queryString", queryString);
		
		return "chance/list";
	}
	
	private String parserParamsToQueryString(Map<String, Object> params) {
		
		if (params != null && params.size() > 0) {
			StringBuilder queryString = new StringBuilder();

			for (Map.Entry<String, Object> entry : params.entrySet()) {
				String key = entry.getKey();
				Object value = entry.getValue();

				queryString.append("filter_").append(key).append("=")
						.append(value).append("&");
			}
//			System.out.println(queryString.replace(queryString.length() - 1,
//					queryString.length(), "").toString());
			// 最后一个的 & 要去除掉
			return queryString.replace(queryString.length() - 1,
					queryString.length(), "").toString();
			// return queryString.substring(0, params.size() - 1).toString();
		}

		return "";
	}

	@ModelAttribute
	public void getSalesChance(@RequestParam(value="id",required=false) Integer id,
			Map<String,Object> map) {
		if(id != null) {
			SalesChance chance = salesChanceService.getById(id);
			map.put("chance", chance);
		}
	}
	
}
